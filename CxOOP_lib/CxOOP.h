#ifndef C_X_OOP_H_
#define C_X_OOP_H_


#define CxOOP_CAT_rev(x, ...) CxOOP_PRIMITIVE_CAT_rev(x, __VA_ARGS__  )
#define CxOOP_PRIMITIVE_CAT_rev(x, ...) __VA_ARGS__  ## x

#define CxOOP_DNA_SPAN(seq) CxOOP_CAT_rev(_END,CxOOP_DNA_SPAN_1 seq)
#define CxOOP_DNA_SPAN_1(XMACRO,X,OBJNAME,...) XMACRO##_1(X,OBJNAME,__VA_ARGS__) CxOOP_DNA_SPAN_2
#define CxOOP_DNA_SPAN_2(XMACRO,X,OBJNAME,...) XMACRO##_2(X,OBJNAME,__VA_ARGS__) CxOOP_DNA_SPAN_LOOP0

#define CxOOP_DNA_SPAN_LOOP0(XMACRO,X,OBJNAME,...) XMACRO##_LOOP(X,OBJNAME,__VA_ARGS__) CxOOP_DNA_SPAN_LOOP1
#define CxOOP_DNA_SPAN_LOOP1(XMACRO,X,OBJNAME,...) XMACRO##_LOOP(X,OBJNAME,__VA_ARGS__) CxOOP_DNA_SPAN_LOOP0
#define CxOOP_DNA_SPAN_1_END
#define CxOOP_DNA_SPAN_2_END
#define CxOOP_DNA_SPAN_LOOP0_END
#define CxOOP_DNA_SPAN_LOOP1_END

#define CxOOP_ExTR_1(X,OBJNAME,...)
#define CxOOP_ExTR_2(X,OBJNAME,...)
#define CxOOP_ExTR_LOOP(X,OBJNAME,...) X(OBJNAME)

#define CxOOP_ExT1_1(X,OBJNAME,...)
#define CxOOP_ExT1_2(X,OBJNAME,...) X(OBJNAME)
#define CxOOP_ExT1_LOOP(X,OBJNAME,...)

#define CxOOP_ExT0_1(X,OBJNAME,...) X(OBJNAME)
#define CxOOP_ExT0_2(X,OBJNAME,...)
#define CxOOP_ExT0_LOOP(X,OBJNAME,...)

#define CxOOP__METHOD__DECLARE(OBJ,RET,FUNCNAME,...)\
        static RET OBJ##_##FUNCNAME ( __VA_ARGS__ );
#define CxOOP__METHOD__SPAN(OBJ,RET,FUNCNAME,...)\
        RET (* FUNCNAME )( __VA_ARGS__ );
#define CxOOP__METHOD__OVERRIDE_SPAN(OBJ,RET,FUNCNAME,...)\
        RET (* SUPER_##FUNCNAME )( __VA_ARGS__ );

#define CxOOP_STRUCT_PUB_(CLASSNAME)\
        CLASSNAME##_PUBLIC_MEMBER_\
        CLASSNAME##_PUBLIC_METHOD_(CLASSNAME,CxOOP__METHOD__SPAN)\

#define CxOOP_STRUCT_PRIV_(CLASSNAME)\
        CLASSNAME##_PRIVATE_MEMBER_\
        CLASSNAME##_PRIVATE_METHOD_(CLASSNAME,CxOOP__METHOD__SPAN)\
        CLASSNAME##_OVERRIDE_METHOD_(CLASSNAME,CxOOP__METHOD__OVERRIDE_SPAN)\

#define CxOOP_STRUCT_OBJ_(CLASSNAME)\
        CxOOP_STRUCT_PUB_(CLASSNAME)\
        const char ___##CLASSNAME##_priv_space[sizeof(struct _PRIVATE_SPACE_##CLASSNAME)];\

#define CxOOP_STRUCT___OMNI__OBJ_(CLASSNAME)\
        CxOOP_STRUCT_PUB_(CLASSNAME)\
        CxOOP_STRUCT_PRIV_(CLASSNAME)

#define CxOOP_OBJECT_DECLARE(CLASSNAME) \
        typedef struct _##CLASSNAME CLASSNAME;\
        typedef struct ___OMNI__##CLASSNAME __OMNI__##CLASSNAME;\
        struct  _PRIVATE_SPACE_##CLASSNAME\
        {\
            CxOOP_STRUCT_PRIV_(CLASSNAME)\
        };\
        struct ___OMNI__##CLASSNAME/* A struct to access all members, use it carefully */\
        {\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExTR,CxOOP_STRUCT_OBJ_))\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExT1,CxOOP_STRUCT_OBJ_))\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExT0,CxOOP_STRUCT___OMNI__OBJ_))\
        };\
        struct _##CLASSNAME/* A struct to provide encapsulation */\
        {\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExTR,CxOOP_STRUCT_OBJ_))\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExT1,CxOOP_STRUCT_OBJ_))\
            CxOOP_DNA_SPAN(CLASSNAME##_DNA_(CxOOP_ExT0,CxOOP_STRUCT_OBJ_))\
        };\
        int CONSTRUCTOR_##CLASSNAME( CLASSNAME * obj);\
        int DESTRUCTOR_##CLASSNAME( CLASSNAME * obj);

#define CxOOP_DECLARE_METHOD(CLASSNAME) \
        CLASSNAME##_PUBLIC_METHOD_(CLASSNAME,CxOOP__METHOD__DECLARE)\
        CLASSNAME##_PRIVATE_METHOD_(CLASSNAME,CxOOP__METHOD__DECLARE)\
        CLASSNAME##_OVERRIDE_METHOD_(CLASSNAME,CxOOP__METHOD__DECLARE)\

#define CxOOP__METHOD__SETTING(OBJ,RET,FUNCNAME,...)\
        omni_obj_____->FUNCNAME=OBJ##_##FUNCNAME;\

#define CxOOP__METHOD__OVERRIDE_SETTING(OBJ,RET,FUNCNAME,...)\
        omni_obj_____->SUPER_##FUNCNAME=(void*)omni_obj_____->FUNCNAME;\
        omni_obj_____->FUNCNAME=(void*)OBJ##_##FUNCNAME;\

#define CxOOP_INIT_METHOD(CLASSNAME,obj_ptr)\
        __OMNI__##CLASSNAME *omni_obj_____=(void*)obj_ptr;\
        CLASSNAME##_PUBLIC_METHOD_(CLASSNAME,CxOOP__METHOD__SETTING)\
        CLASSNAME##_PRIVATE_METHOD_(CLASSNAME,CxOOP__METHOD__SETTING)\
        CLASSNAME##_OVERRIDE_METHOD_(CLASSNAME,CxOOP__METHOD__OVERRIDE_SETTING)\

#define CxOOP_DCAST(toCLASS,obj_PTR)  ((toCLASS*)((void*)((obj_PTR)+(  0*(int)((obj_PTR)->___##toCLASS##_priv_space)  ))))
#define DCAST(toCLASS,obj_PTR)  CxOOP_DCAST(toCLASS,obj_PTR)

#endif  //C_X_OOP_H_
